// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from father.djinni

#import "MCMTModelFather+Private.h"
#import "MCMTModelFather.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "MCMTFatherCallback+Private.h"
#import "MCMTLogger+Private.h"
#import "MCMTNetworkRequest+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface MCMTModelFather ()

- (id)initWithCpp:(const std::shared_ptr<::mobilecppmemorytest::ModelFather>&)cppRef;

@end

@implementation MCMTModelFather {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::mobilecppmemorytest::ModelFather>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::mobilecppmemorytest::ModelFather>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable MCMTModelFather *)create:(nullable id<MCMTNetworkRequest>)networkRequest
                              logger:(nullable id<MCMTLogger>)logger {
    try {
        auto objcpp_result_ = ::mobilecppmemorytest::ModelFather::create(::djinni_generated::NetworkRequest::toCpp(networkRequest),
                                                                         ::djinni_generated::Logger::toCpp(logger));
        return ::djinni_generated::ModelFather::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)simulateWork:(nullable id<MCMTFatherCallback>)fatherCallback {
    try {
        _cppRefHandle.get()->simulateWork(::djinni_generated::FatherCallback::toCpp(fatherCallback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto ModelFather::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto ModelFather::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<MCMTModelFather>(cpp);
}

}  // namespace djinni_generated

@end
